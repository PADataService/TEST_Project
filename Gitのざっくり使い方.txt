■Gitでできること
　・バージョン管理
　・前の状態に戻すことができる
　・チーム開発

■GitHubでできること
　・コード共有
　・コードレビュー
　・OSSに参加できる

■Gitの基本コマンド
　・ローカルリポジトリの初期化
　　$ git init

　・記録
　　ワークツリー（作業環境）
　　ステージ（コミットする前の領域）
　　　$ git add .
　　リポジトリ
　　　$ git commit -m “メッセージ”

　・状態の確認
　　変更ファイルを確認
　　　$ git status
　　変更の確認
　　　$ git diff

　・変更履歴の確認
　　　$ git log

　・元に戻す
　　　$ git restore <ファイル名>
　　　$ git restore  --stage <ファイル名>

■GitHubチーム開発の流れ
　①ローカルリポジトリでブランチを作成して開発を進める。
　　ブランチはコミットに対するラベルと考える
　　ラベリングすることで分岐開発ができる
　　ブランチの作成：$ git branch <ブランチ名>
　　ブランチの一覧表示：$ git branch -a
　　ブランチの切替（HEADの切替）：$ git switch <ブランチ名>
　　　　　　　　　　　　　　　　　　$ git switch -c <ブランチ名>
　　変更内容のマージ：$ git merge <ブランチ名>
　　　　　　　　　　　$ git merge origin/main
　　コンフリクトの対処
　　　ファイルの内容を修正
　　　<<,== , >>を除去

　②GitHubへプッシュする。
　　初期設定
　　　$ git config --global user.name “GitHubに登録したユーザ名”
　　　$ git config --global user.email GitHubに登録したメールアドレス
　　
　　リポジトリの追加
　　　$ git remote add <リモート名> <リモートURL>

　　プッシュ
　　　$ git push <リモート名> <ブランチ名>

　　プル
　　　$ git pull <リモート名> <ブランチ名>
　　　※<リモート名> <ブランチ名>は省略可能

　　フェッチ
　　　$ git fetch <リモート名>

　　プルとフェッチの違い
　　　プル：フェッチ＋マージ
　　　フェッチ：ワークツリーのファイルは変更しないためマージが必要
　　　　　　　　コンフリクトが発生しそうな場合はフェッチの方がいい

　③プルリクエストをする。
　　プルリクエストはリモートリポジトリにプッシュした後にマージしていいかのレビュー依頼をすることである
　　

■GitHubを用いたチーム既発の基本的な手順
　①mainブランチをリモートリポジトリからローカルリポジトリへプル
　②ローカルリポジトリでブランチを作成する
　③ファイルの修正・コミット
　④リモートリポジトリへプッシュ
　⑤プルリクエスト
　⑥コードレビュー
　⑦マージ

